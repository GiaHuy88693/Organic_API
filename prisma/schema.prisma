generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  SUSPENDED
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  password    String
  fullname    String
  username    String?
  phoneNumber String
  avatar      String?
  dateOfBirth DateTime?
  roleId      String     @db.ObjectId
  role        Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  totpSecret  String?
  status      UserStatus @default(INACTIVE)

  isLocked           Boolean         @default(false)
  lockExpirationDate DateTime?
  lastViolationId    String?         @db.ObjectId
  violations         UserViolation[]
  isEmailVerified    Boolean         @default(false)
  isPhoneVerified    Boolean         @default(false)

  createdById  String? @db.ObjectId
  createdBy    User?   @relation("UserCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers User[]  @relation("UserCreatedBy")

  updatedById  String? @db.ObjectId
  updatedBy    User?   @relation("UserUpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedUsers User[]  @relation("UserUpdatedBy")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userRoles       UserRole[]
  userPermissions UserPermission[]
  refreshTokens   RefreshToken[]
  devices         Device[]
  orders          Order[]
  wishlists       Wishlist[]
  carts           Cart[]

  // Audit relations
  createdCategories      Category[]       @relation("CategoryCreatedBy")
  updatedCategories      Category[]       @relation("CategoryUpdatedBy")
  createdProducts        Product[]        @relation("ProductCreatedBy")
  updatedProducts        Product[]        @relation("ProductUpdatedBy")
  createdOrders          Order[]          @relation("OrderCreatedBy")
  updatedOrders          Order[]          @relation("OrderUpdatedBy")
  createdDetails         OrderDetail[]    @relation("OrderDetailCreatedBy")
  updatedDetails         OrderDetail[]    @relation("OrderDetailUpdatedBy")
  createdCarts           Cart[]           @relation("CartCreatedBy")
  updatedCarts           Cart[]           @relation("CartUpdatedBy")
  createdRoles           Role[]           @relation("RoleCreatedBy")
  updatedRoles           Role[]           @relation("RoleUpdatedBy")
  createdPermissions     Permission[]     @relation("PermissionCreatedBy")
  updatedPermissions     Permission[]     @relation("PermissionUpdatedBy")
  createdUserRoles       UserRole[]       @relation("UserRoleCreatedBy")
  updatedUserRoles       UserRole[]       @relation("UserRoleUpdatedBy")
  createdRolePermissions RolePermission[] @relation("RolePermissionCreatedBy")
  updatedRolePermissions RolePermission[] @relation("RolePermissionUpdatedBy")
  createdViolations      UserViolation[]  @relation("UserViolationCreatedBy")

  @@map("users")
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  slug        String  @unique
  description String?
  isActive    Boolean @default(true)
  createdById String? @db.ObjectId
  createdBy   User?   @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]

  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String
  path        String
  method      HTTPMethod
  // ===== Audit fields =====
  createdById String?    @db.ObjectId
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String   @db.ObjectId
  permissionId String   @db.ObjectId
  grantedAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("RolePermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("RolePermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  roleId     String   @db.ObjectId
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("UserRoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("UserRoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserPermission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  permissionId String   @db.ObjectId
  grantedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  deviceId  String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationCode {
  id    String               @id @default(auto()) @map("_id") @db.ObjectId
  email String               @unique
  code  String
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([email, code, type])
}

model UserViolation {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  reason           String
  violationType    ViolationType
  actionTaken      ActionTaken
  lockDurationDays Int?
  createdById      String        @db.ObjectId
  createdBy        User?         @relation("UserViolationCreatedBy", fields: [createdById], references: [id])
  createdAt        DateTime      @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Device {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  deviceId   String    @unique
  deviceName String?
  userAgent  String
  ip         String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  lastActive DateTime  @updatedAt
  deletedAt  DateTime?

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]

  @@unique([userId, deviceId])
  @@map("devices")
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?

  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String  @unique
  description String?
  price       Float
  categoryId  String? @db.ObjectId
  quantity    Int     @default(0)

  category Category? @relation(fields: [categoryId], references: [id])

  createdById String? @db.ObjectId
  createdBy   User?   @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  images       ProductImage[]
  orderDetails OrderDetail[]
  wishlists    Wishlist[]
  carts        Cart[]

  @@map("products")
}

model ProductImage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  url         String
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdById String?  @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Order {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String? @db.ObjectId
  totalAmount Float
  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user    User?         @relation(fields: [userId], references: [id])
  details OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("OrderDetailCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("OrderDetailUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_details")
}

model Cart {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  // ===== Audit fields =====
  createdById String? @db.ObjectId
  createdBy   User?   @relation("CartCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation("CartUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlists")
}

model Payment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  provider     String   @default("momo")
  orderId      String   @unique
  requestId    String   @unique
  amount       Int
  currency     String   @default("VND")
  status       String   @default("PENDING") // PENDING | SUCCESS | FAILED | CANCELED
  message      String?
  transId      String?  
  raw          Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("payments")
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  RESET_PASSWORD
}

enum ActionTaken {
  WARNING
  LOCK
  BAN
  UNLOCK
}

enum ViolationType {
  SPAM
  CHEAT
  POLICY_VIOLATION
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}
